package socialnetwork.Util.reports;

import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import socialnetwork.Util.Constants;
import socialnetwork.domain.Friend;
import socialnetwork.domain.Message;
import socialnetwork.domain.Utilizator;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

public class PDFHelper {
    private static Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font subTitleFont = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.ITALIC);

    public static void exportR1(Utilizator user, LocalDateTime from, LocalDateTime to, List<Friend> friends, List<Message> messages, String filePath) {
        try {
            Document document = new Document();
            var writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();
            addTitleR1(document, user, from, to);
            Paragraph subTitle1 = new Paragraph("");
            subTitle1.add(new Paragraph("Your new friends: ", subTitleFont));
            addEmptyLine(subTitle1, 1);
            document.add(subTitle1);
            addTable(document, friends);
            Paragraph subTitle2 = new Paragraph();
            addEmptyLine(subTitle2, 4);
            subTitle2.add(new Paragraph("Received messages: ", subTitleFont));
            addEmptyLine(subTitle2, 1);
            document.add(subTitle2);
            addMessagesTable(document, messages);
            addBarChart(writer, document, messages);
            document.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void exportR2(Utilizator user, LocalDateTime from, LocalDateTime to, List<Message> messages, String filePath) {
        try {
            Document document = new Document();
            var writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();
            addTittleR2(document, user, from, to);
            Paragraph subTitle2 = new Paragraph();
            addEmptyLine(subTitle2, 1);
            subTitle2.add(new Paragraph("Received messages: ", subTitleFont));
            addEmptyLine(subTitle2, 1);
            document.add(subTitle2);
            addMessagesTable(document, messages);
            document.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static void addTittleR2(Document document, Utilizator user, LocalDateTime from, LocalDateTime to) throws DocumentException {
        Paragraph title = new Paragraph();
        addEmptyLine(title, 1);
        title.add(new Paragraph("Generated report R2", titleFont));
        document.add(title);
        Paragraph info = new Paragraph();
        addEmptyLine(info, 1);
        LocalDateTime now = LocalDateTime.now();
        var name = user.getFirstName() + " " + user.getLastName();
        info.add(new Paragraph("This report was generated by: " + name + " on " + now.format(Constants.eventDateTime)));
        document.add(info);
        Paragraph reportDetails = new Paragraph();
        addEmptyLine(reportDetails, 2);
        reportDetails.add(new Paragraph("This report consists of:"));
        reportDetails.add(new Paragraph("      - received messages from a certain user."));
        reportDetails.add(new Paragraph("Selected period: " + from.format(Constants.eventDateTime) + " - " + to.format(Constants.eventDateTime)));
        addEmptyLine(reportDetails, 2);
        document.add(reportDetails);
    }

    private static void addBarChart(PdfWriter writer, Document document, List<Message> messages) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        messages.stream().collect(Collectors.groupingBy(Message::getFrom))
                .forEach((x, y) -> dataset.setValue(y.size(), "Messages", x.getFirstName() + " " + x.getLastName()));
        JFreeChart chart = ChartFactory.createBarChart("Total messages", "User", "Messages", dataset, PlotOrientation.VERTICAL, false, false, false);
        document.newPage();
        PdfContentByte pdfContentByte = writer.getDirectContent();
        int width = 400;
        int height = 300;
        PdfTemplate pdfTemplate = pdfContentByte.createTemplate(width, height);

        Graphics2D graphics2d = pdfTemplate.createGraphics(width, height,
                new DefaultFontMapper());
        Rectangle2D rectangle2d = new Rectangle2D.Double(
                0, 0, width, height);
        chart.draw(graphics2d, rectangle2d);
        graphics2d.dispose();
        pdfContentByte.addTemplate(pdfTemplate, 40, 500);
    }

    private static void addTitleR1(Document document, Utilizator user, LocalDateTime from, LocalDateTime to) throws DocumentException {
        Paragraph title = new Paragraph();
        addEmptyLine(title, 1);
        title.add(new Paragraph("Generated report R1", titleFont));
        document.add(title);

        Paragraph info = new Paragraph();
        addEmptyLine(info, 1);
        LocalDateTime now = LocalDateTime.now();
        var name = user.getFirstName() + " " + user.getLastName();
        info.add(new Paragraph("This report was generated by: " + name + " on " + now.format(Constants.eventDateTime)));
        document.add(info);
        Paragraph reportDetails = new Paragraph();
        addEmptyLine(reportDetails, 2);
        reportDetails.add(new Paragraph("This report consists of:"));
        reportDetails.add(new Paragraph("      - new friends and received messages from a certain period."));
        reportDetails.add(new Paragraph("Selected period: " + from.format(Constants.eventDateTime) + " - " + to.format(Constants.eventDateTime)));
        addEmptyLine(reportDetails, 2);
        document.add(reportDetails);
    }

    private static void addTable(Document document, List<Friend> friends) throws DocumentException, IOException {
        PdfPTable table = new PdfPTable(3);

        PdfPCell cell = new PdfPCell(new Phrase("Profile image"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Name"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("date"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        table.setHeaderRows(1);

        for (var friend : friends) {
            Image image = Image.getInstance(friend.getImagePath());
            image.scaleToFit(32.0f, 32.0f);
            PdfPCell imageCell = new PdfPCell(image, false);
            imageCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(imageCell);
            PdfPCell nameCell = new PdfPCell(new Phrase(friend.getFirstName() + " " + friend.getLastName()));
            nameCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(nameCell);
            table.addCell(friend.getDateTime().format(Constants.dateTimeFormat));
        }
        document.add(table);
    }

    private static void addMessagesTable(Document document, List<Message> messages) throws DocumentException {
        PdfPTable table = new PdfPTable(3);
        PdfPCell cell = new PdfPCell(new Phrase("From"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Message"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        cell = new PdfPCell(new Phrase("Date"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        table.setHeaderRows(1);
        for (var message : messages) {
            cell = new PdfPCell(new Phrase(message.getFrom().getFirstName() + " " + message.getFrom().getLastName()));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(message.getMessageBody()));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(message.getDate().format(Constants.eventDateTime)));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }
        document.add(table);
    }

    private static void addEmptyLine(Paragraph paragraph, int numberOfLines) {
        for (int i = 0; i < numberOfLines; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
